{
	"info": {
		"_postman_id": "407eea28-af72-4247-8f53-65aa33deb743",
		"name": "Tools Shop",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "44233006",
		"_collection_link": "https://tann-2401946.postman.co/workspace/Tann's-Workspace~52daee7a-58f8-48d7-8bd9-eb0d9cdaa0da/collection/44233006-407eea28-af72-4247-8f53-65aa33deb743?action=share&source=collection_link&creator=44233006"
	},
	"item": [
		{
			"name": "Get All Categories",
			"item": [
				{
					"name": "https://api-with-bugs.practicesoftwaretesting.com/categories/tree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is a non-empty array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"    pm.expect(jsonData.length).to.be.above(0);\r",
									"});\r",
									"\r",
									"pm.test(\"Each item has full properties\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    jsonData.forEach(cat => {\r",
									"        pm.expect(cat).to.have.property(\"id\");\r",
									"        pm.expect(cat).to.have.property(\"parent_id\");\r",
									"        pm.expect(cat).to.have.property(\"name\");\r",
									"        pm.expect(cat).to.have.property(\"name\");\r",
									"        pm.expect(cat).to.have.property(\"slug\");\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api-with-bugs.practicesoftwaretesting.com/categories",
							"protocol": "https",
							"host": [
								"api-with-bugs",
								"practicesoftwaretesting",
								"com"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Category",
			"item": [
				{
					"name": "https://api-with-bugs.practicesoftwaretesting.com/categories/tree Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status is 200 or 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created category\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"parent_id\", pm.iterationData.get(\"parent_id\"));\r",
									"    pm.expect(jsonData).to.have.property(\"name\", pm.iterationData.get(\"name\"));\r",
									"    pm.expect(jsonData).to.have.property(\"slug\", pm.iterationData.get(\"slug\"));\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"parent_id\": {{parent_id}},\r\n    \"name\": \"{{name}}\",\r\n    \"slug\": \"{{slug}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-with-bugs.practicesoftwaretesting.com/categories",
							"protocol": "https",
							"host": [
								"api-with-bugs",
								"practicesoftwaretesting",
								"com"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Search Categories",
			"item": [
				{
					"name": "https://api-with-bugs.practicesoftwaretesting.com/categories/tree Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(\"Search result contains query term\", function () {\r",
									"    let jsonData = pm.response.json();\r",
									"    let query = pm.iterationData.get(\"search\").toLowerCase();\r",
									"    jsonData.forEach(cat => {\r",
									"        pm.expect(cat.name.toLowerCase()).to.include(query);\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "q",
									"value": "h",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "https://api-with-bugs.practicesoftwaretesting.com/categories/search?q={{keyword}}",
							"protocol": "https",
							"host": [
								"api-with-bugs",
								"practicesoftwaretesting",
								"com"
							],
							"path": [
								"categories",
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "{{keyword}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}